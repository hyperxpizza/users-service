// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package grpc

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UsersServiceClient is the client API for UsersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UsersServiceClient interface {
	GetLoginData(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginData, error)
	InsertLoginData(ctx context.Context, in *NewLoginData, opts ...grpc.CallOption) (*ID, error)
	DeleteLoginData(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error)
}

type usersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUsersServiceClient(cc grpc.ClientConnInterface) UsersServiceClient {
	return &usersServiceClient{cc}
}

func (c *usersServiceClient) GetLoginData(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginData, error) {
	out := new(LoginData)
	err := c.cc.Invoke(ctx, "/UsersService/GetLoginData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) InsertLoginData(ctx context.Context, in *NewLoginData, opts ...grpc.CallOption) (*ID, error) {
	out := new(ID)
	err := c.cc.Invoke(ctx, "/UsersService/InsertLoginData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersServiceClient) DeleteLoginData(ctx context.Context, in *ID, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/UsersService/DeleteLoginData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UsersServiceServer is the server API for UsersService service.
// All implementations must embed UnimplementedUsersServiceServer
// for forward compatibility
type UsersServiceServer interface {
	GetLoginData(context.Context, *LoginRequest) (*LoginData, error)
	InsertLoginData(context.Context, *NewLoginData) (*ID, error)
	DeleteLoginData(context.Context, *ID) (*empty.Empty, error)
	mustEmbedUnimplementedUsersServiceServer()
}

// UnimplementedUsersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUsersServiceServer struct {
}

func (UnimplementedUsersServiceServer) GetLoginData(context.Context, *LoginRequest) (*LoginData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLoginData not implemented")
}
func (UnimplementedUsersServiceServer) InsertLoginData(context.Context, *NewLoginData) (*ID, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertLoginData not implemented")
}
func (UnimplementedUsersServiceServer) DeleteLoginData(context.Context, *ID) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLoginData not implemented")
}
func (UnimplementedUsersServiceServer) mustEmbedUnimplementedUsersServiceServer() {}

// UnsafeUsersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UsersServiceServer will
// result in compilation errors.
type UnsafeUsersServiceServer interface {
	mustEmbedUnimplementedUsersServiceServer()
}

func RegisterUsersServiceServer(s grpc.ServiceRegistrar, srv UsersServiceServer) {
	s.RegisterService(&UsersService_ServiceDesc, srv)
}

func _UsersService_GetLoginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).GetLoginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/GetLoginData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).GetLoginData(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_InsertLoginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewLoginData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).InsertLoginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/InsertLoginData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).InsertLoginData(ctx, req.(*NewLoginData))
	}
	return interceptor(ctx, in, info, handler)
}

func _UsersService_DeleteLoginData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UsersServiceServer).DeleteLoginData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UsersService/DeleteLoginData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UsersServiceServer).DeleteLoginData(ctx, req.(*ID))
	}
	return interceptor(ctx, in, info, handler)
}

// UsersService_ServiceDesc is the grpc.ServiceDesc for UsersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UsersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UsersService",
	HandlerType: (*UsersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLoginData",
			Handler:    _UsersService_GetLoginData_Handler,
		},
		{
			MethodName: "InsertLoginData",
			Handler:    _UsersService_InsertLoginData_Handler,
		},
		{
			MethodName: "DeleteLoginData",
			Handler:    _UsersService_DeleteLoginData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "users-service.proto",
}
